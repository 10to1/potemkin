#!/usr/bin/env ruby
# Most of this came from capistrano's capify.
require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to potemkinize, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to potemkinize."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

def instructions_file_path
  "config/potemkin.rb"
end

def instructions_text
  <<TEXT
# [Potemkin](http://github.com/10to1/potemkin)
# This file is used by Potemkin to make building this app from
# a cli-environment easier.
#
# For iOS projects, uncomment the following:
#
#    Potemkin.configure do |config|
#      config.platform = :ios
#      config.target = "target to build>"
#      config.configuration = "Release"
#      config.project = "<project path>"
#    end
#
# For Android projects, uncomment the following:
#
#    Potemkin.configure do |config|
#      config.platform = :android
#      config.android_project_dir = "<your project dir>"
#    end
#
# You can now run `potemkin build` to create a build.
TEXT
end

base = ARGV.shift
file = File.join(base, instructions_file_path)

if File.exists?(file)
  warn "[skip] '#{file}' already exists"
elsif File.exists?(file.downcase)
  warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
else
  unless File.exists?(File.dirname(file))
    puts "[add] making directory '#{File.dirname(file)}'"
    FileUtils.mkdir(File.dirname(file))
  end
  puts "[add] writing '#{file}'"
  File.open(file, "w") { |f| f.write(instructions_text) }
end

puts "[done] potemkinized.!"
